<touch> creates files in current directory in Bash. <rm> removes them. <man> gives the manual for the command that follows <man>

<ls-a> in Bash displays hidden (system) files starting with ".". Cloning an existing repository transfers this metadata to your computer

<git init> initializes a new repository in the current workspace/directory
	• No commits are created with an init command

<git status> shows which files have changes since the last commit

Working directory (computer hard drive) -> Staging Area -> Repository
	• To add files to staging area: <git add FILENAME>
	• To remove files from staging area: <git rm --cached FILENAME>

<git diff> with no arguments compares the working directory to the staging area.

<git diff --staged> compares staging area with repository

Branching:
	• Labels for commits
	• Master: name given to main branch in most repositoriest (automatically created)
	• Detached head: looking at commit that was not labeled with branch name
	• Can check out branch
	• Give branches descriptive names
	• Current last commit on branch: "tip" of branch
	• Merging: combining two branches/commits
	• New feature of fixing bug--> new branch
	• Master branch never breaks, always works
	• Develop branch is in progress stuff
	• Experimental branch is sketchiest/most broken/least quality

<git branch NAME> creates new branch with name NAME

<git branch> (no arguments) shows current branches (starred branch is currently checked out)

Use <git checkout BRANCHNAME> to check out new branch

Remote branches are branches other people have made. If checked out, acts like your own branch.

<git log --graph --oneline BRANCH1 BRANCH2> shows history of branches in arguments

each commit stores data about its "parent", or previous branch
	• If you have two branch tips, one or another may be unreachable!

In detached HEAD state, can use <git checkout -b NEWBRANCHNAME>
	• This is equivalent to running the following:j
		1) git branch NEWBRANCHNAME
		2) git checkout NEWBRANCHNAME

Merging: combining two branches
	• Git will ask you to clarify what exactly it should merge together in unclear cases
	• Git has record of code before branches diverged, and can create combined version strategically

Can delete branch label once it is merged into master

Commits will be sorted by timestamp once merges happen

<git merge master BRANCHNAME>
